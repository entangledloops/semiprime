buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url uri(System.getenv("INTEL_MULTI_OS_ENGINE_HOME") + "/gradle") }
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.1.0'
        classpath 'com.intel.gradle:moeGradlePlugin:1.1.0.final-1'
    }
}

// produces stamps formatted so they appear sorted: newest -> oldest (alphabetically)
def getDateTimeStamp() {
    def date = new Date()
    def dateTimeStamp = date.format('yyyyMMddHHmmss')
    return dateTimeStamp
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = '1.0'
    ext {
        appName = "semiprime"
        gradleVersion = '2.13'
        javaSourceVersion = '1.8'
        gdxVersion = '1.9.3'
        roboVMVersion = '2.1.0'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
    }

    // color errors
    System.setProperty('org.gradle.color.error', 'RED')

    // setup logging external commands + stdout and stderr to file for debugging
    tasks.withType(Exec) {
        doFirst {
            println commandLine
        }
        standardInput = System.in
        standardOutput = System.out
        errorOutput = System.err
        ignoreExitValue = false
    }

    // log everything and in a standard way
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.ERROR

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        jcenter()
        maven { url uri(System.getenv("INTEL_MULTI_OS_ENGINE_HOME") + "/gradle") }
    }
}

// create a task for updating the gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = "$project.gradleVersion"
    logger.lifecycle "gradle wrapper version: $gradleVersion"
}

project(":desktop") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

        compile fileTree(dir: "libs", include: "*.jar")
    }
}

project(":android") {
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

        compile fileTree(dir: "libs", include: "*.jar")
    }
}

project(":ios") {
    apply plugin: "java"
    apply plugin: "robovm"


    dependencies {
        compile project(":core")
        compile "com.mobidevelop.robovm:robovm-rt:$roboVMVersion"
        compile "com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion"
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"

        compile fileTree(dir: "libs", include: "*.jar")
    }
}

project(":html") {
    apply plugin: "gwt"
    apply plugin: "war"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"

        compile fileTree(dir: "libs", include: "*.jar")
    }
}

project(":core") {
    apply plugin: "java"

    test {
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'
    }

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"

        compile fileTree(dir: "libs", include: "*.jar")
    }
}

project(":ios-moe") {
    apply plugin: "moe"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-moe:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"

        compile fileTree(dir: "libs", include: "*.jar")
    }
}

tasks.eclipse.doLast {
    delete ".project"
}